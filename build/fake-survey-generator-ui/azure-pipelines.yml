trigger:
  branches:
    include:
      - master
  paths:
    include:
      - src/client/ui/*
      - charts/fake-survey-generator-ui/*
      - build/fake-survey-generator-ui/*

pr:
  branches:
    include:
      - master
      - feat/*
      - fix/*
      - chore/*
      - refactor/*
  paths:
    include:
      - src/client/ui/*
      - charts/fake-survey-generator-ui/*
      - build/fake-survey-generator-ui/*

stages:
  - stage: Build
    displayName: 'Build'
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'

        variables:
          imageName: fakesurveygeneratorui

        steps:
        - task: UseDotNet@2
          displayName: 'Install .NET Core SDK'
          inputs:
            packageType: 'sdk'
            useGlobalJson: true

        - task: DotNetCoreCLI@2  
          inputs:
            command: custom
            custom: tool
            arguments: install --tool-path ./src/client/ui nbgv --version 3.2.31
          displayName: Install NBGV tool

        - script: ./nbgv cloud -a
          workingDirectory: src/client/ui
          displayName: Set Version

        - script: |
            ./nbgv get-version -v SemVer1 > version.txt
          workingDirectory: src/client/ui
          displayName: 'Create Version file'

        - task: PublishPipelineArtifact@1
          inputs:
            targetPath: 'src/client/ui/version.txt'
            artifact: 'VersionFile'
          displayName: 'Publish Version File'

        - script: |
            docker build --build-arg REACT_APP_VERSION=$(NBGV_SemVer1) -t $(dockerId)/$(imageName):$(NBGV_SemVer1) -t $(dockerId)/$(imageName):latest -f src/client/ui/Dockerfile .
          displayName: 'Build Docker Image'

        - script: |
            echo "$DOCKER_PASSWORD" | docker login -u $(dockerId) --password-stdin
            docker push $(dockerId)/$(imageName)
          env:
            DOCKER_PASSWORD: $(dockerPassword)
          displayName: 'Push Image to Docker Hub'

  - stage: Publish
    displayName: 'Publish'
    jobs:
      - job: Publish_Chart
        displayName: 'Publish Fake Survey Generator UI Chart'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
              - download: 'current'
                artifact: 'VersionFile'

              - script: |
                  GIT_VERSION=$(< $(Pipeline.Workspace)/VersionFile/version.txt)
                  echo "##vso[task.setvariable variable=VersionTag]$GIT_VERSION"
                displayName: 'Set Version from Version File'

              - task: HelmInstaller@1
                inputs:
                  helmVersionToInstall: '3.2.4'
                displayName: 'Install Helm'

              - task: HelmDeploy@0
                inputs:
                  command: 'package'
                  chartPath: 'charts/$(projectName)'
                  chartVersion: '$(VersionTag)'
                  save: false
                displayName: 'Helm Package'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az configure --defaults acr=$(registryName)'
  #               displayName: 'Set Azure Container Registry Default in Azure CLI'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az acr helm repo add'
  #               displayName: 'Add Azure Container Registry Repo to Azure CLI'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az acr helm push $(Build.ArtifactStagingDirectory)/$(projectName)-$(VersionTag).tgz'
  #               displayName: 'Push Helm Chart to Azure Container Registry'

  # - stage: Test_Deployment
  #   displayName: 'Test Deployment'
  #   jobs:
  #     - deployment: Deployment_Job
  #       displayName: Deploy Fake Survey Generator UI
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       variables:
  #         environmentSuffix: test
  #         ingressClusterIssuerName: letsencrypt-prod
  #         ingressHost: aks-test.fakesurveygenerator.marcelmichau.dev
  #         ingressTlsSecretName: marcelmichau-dev-tls-secret
  #         replicaCount: 2
  #         targetNamespace: test-env
  #       environment: 'aks-test'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #             - script: |
  #                 GIT_VERSION=$(< $(Pipeline.Workspace)/VersionFile/version.txt)
  #                 echo "##vso[task.setvariable variable=VersionTag]$GIT_VERSION"
  #               displayName: 'Set Version from Version File'

  #             - task: KubectlInstaller@0
  #               displayName: 'Install Kubectl latest'

  #             - task: HelmInstaller@1
  #               inputs:
  #                 helmVersionToInstall: '3.2.4'
  #               displayName: 'Install Helm'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az configure --defaults acr=$(registryName)'
  #               displayName: 'Set Azure Container Registry Default in Azure CLI'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az acr helm repo add'
  #               displayName: 'Add Azure Container Registry Repo to Azure CLI'

  #             - task: HelmDeploy@0
  #               displayName: 'helm upgrade'
  #               inputs:
  #                 connectionType: 'Azure Resource Manager'
  #                 azureSubscription: 'MyARMConnection'
  #                 azureResourceGroup: 'kubernetes-playground-test-rg'
  #                 kubernetesCluster: 'aks-cluster'
  #                 namespace: '$(targetNamespace)'
  #                 command: 'upgrade'
  #                 chartType: 'Name'
  #                 chartName: '$(registryName)/$(projectName)'
  #                 releaseName: '$(projectName)-$(environmentSuffix)'
  #                 arguments: >-
  #                   --version $(VersionTag) 
  #                   --set image.repository=$(imageRepository) 
  #                   --set image.tag=$(VersionTag) 
  #                   --set ingress.hosts[0].host=$(testEnvIngressHost) 
  #                   --set ingress.hosts[0].paths[0]=/ 
  #                   --set ingress.tls[0].secretName=$(ingressTlsSecretName) 
  #                   --set ingress.tls[0].hosts={$(ingressHost)} 
  #                   --set ingress.annotations."cert-manager\.io/cluster-issuer"=$(ingressClusterIssuerName) 
  #                   --set replicaCount=$(replicaCount)

  # - stage: Production_Deployment
  #   displayName: 'Production Deployment'
  #   jobs:
  #     - deployment: Deployment_Job
  #       displayName: Deploy Fake Survey Generator UI
  #       pool:
  #         vmImage: 'ubuntu-latest'
  #       variables:
  #         environmentSuffix: prod
  #         ingressClusterIssuerName: letsencrypt-prod
  #         ingressHost: aks.fakesurveygenerator.marcelmichau.dev
  #         ingressTlsSecretName: marcelmichau-dev-tls-secret
  #         replicaCount: 2
  #         targetNamespace: prod-env
  #       environment: 'aks-prod'
  #       strategy:
  #         runOnce:
  #           deploy:
  #             steps:
  #             - script: |
  #                 GIT_VERSION=$(< $(Pipeline.Workspace)/VersionFile/version.txt)
  #                 echo "##vso[task.setvariable variable=VersionTag]$GIT_VERSION"
  #               displayName: 'Set Version from Version File'

  #             - task: KubectlInstaller@0
  #               displayName: 'Install Kubectl latest'

  #             - task: HelmInstaller@1
  #               inputs:
  #                 helmVersionToInstall: '3.2.4'
  #               displayName: 'Install Helm'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az configure --defaults acr=$(registryName)'
  #               displayName: 'Set Azure Container Registry Default in Azure CLI'

  #             - task: AzureCLI@1
  #               inputs:
  #                 azureSubscription: 'MyARMConnection'
  #                 scriptLocation: 'inlineScript'
  #                 inlineScript: 'az acr helm repo add'
  #               displayName: 'Add Azure Container Registry Repo to Azure CLI'

  #             - task: HelmDeploy@0
  #               displayName: 'helm upgrade'
  #               inputs:
  #                 connectionType: 'Azure Resource Manager'
  #                 azureSubscription: 'MyARMConnection'
  #                 azureResourceGroup: 'kubernetes-playground-test-rg'
  #                 kubernetesCluster: 'aks-cluster'
  #                 namespace: '$(targetNamespace)'
  #                 command: 'upgrade'
  #                 chartType: 'Name'
  #                 chartName: '$(registryName)/$(projectName)'
  #                 releaseName: '$(projectName)-$(environmentSuffix)'
  #                 arguments: >-
  #                   --version $(VersionTag) 
  #                   --set image.repository=$(imageRepository) 
  #                   --set image.tag=$(VersionTag) 
  #                   --set ingress.hosts[0].host=$(prodEnvIngressHost) 
  #                   --set ingress.hosts[0].paths[0]=/ 
  #                   --set ingress.tls[0].secretName=$(ingressTlsSecretName) 
  #                   --set ingress.tls[0].hosts={$(ingressHost)} 
  #                   --set ingress.annotations."cert-manager\.io/cluster-issuer"=$(ingressClusterIssuerName) 
  #                   --set replicaCount=$(replicaCount)