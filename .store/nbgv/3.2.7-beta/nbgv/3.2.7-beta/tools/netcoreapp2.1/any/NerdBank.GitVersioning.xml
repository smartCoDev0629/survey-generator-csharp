<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NerdBank.GitVersioning</name>
    </assembly>
    <members>
        <member name="T:Nerdbank.GitVersioning.CloudBuild">
            <summary>
            Provides access to cloud build providers.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.CloudBuild.SupportedCloudBuilds">
            <summary>
            An array of cloud build systems we support.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.CloudBuild.Active">
            <summary>
            Gets the cloud build provider that applies to this build, if any.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.CloudBuild.ShouldStartWith(System.String,System.String)">
            <summary>
            Gets the specified string, prefixing it with some value if it is non-empty and lacks the prefix.
            </summary>
            <param name="prefix">The prefix that should be included in the returned value.</param>
            <param name="value">The value to prefix.</param>
            <returns>The <paramref name="value" /> provided, with <paramref name="prefix" /> prepended
            if the value doesn't already start with that string and the value is non-empty.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.AppVeyor">
            <summary>
            
            </summary>
            <remarks>
            The AppVeyor-specific properties referenced here are documented here:
            http://www.appveyor.com/docs/environment-variables 
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.CloudBuildServices.AppVeyor.BuildingBranch">
            <summary>
            
            </summary>
            <remarks>
            AppVeyor's branch variable is the target branch of a PR, which is *NOT* to be misinterpreted 
            as building the target branch itself. So only set the branch built property if it's not a PR.
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.AtlassianBamboo">
            <summary>
            
            </summary>
            <remarks>
            The Bamboo-specific properties referenced here are documented here:
            https://confluence.atlassian.com/bamboo/bamboo-variables-289277087.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.GitLab">
            <summary>
            
            </summary>
            <remarks>
            The GitLab-specific properties referenced here are documented here:
            https://docs.gitlab.com/ce/ci/variables/README.html
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.Jenkins">
            <remarks>
            The Jenkins-specific properties referenced here are documented here:
            https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin#GitPlugin-Environmentvariables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.TeamCity">
            <summary>
            TeamCity CI build support.
            </summary>
            <remarks>
            The TeamCIty-specific properties referenced here are documented here:
            https://confluence.jetbrains.com/display/TCD8/Predefined+Build+Parameters
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.Travis">
            <summary>
            Travis CI build support.
            </summary>
            <remarks>
            The Travis CI environment variables referenced here are documented here:
            https://docs.travis-ci.com/user/environment-variables/#default-environment-variables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.CloudBuildServices.VisualStudioTeamServices">
            <summary>
            
            </summary>
            <remarks>
            The VSTS-specific properties referenced here are documented here:
            https://msdn.microsoft.com/en-us/Library/vs/alm/Build/scripts/variables
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.FilterPath">
            <summary>
            A filter (include or exclude) representing a repo relative path.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsExclude">
            <summary>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents an exclude filter.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.RepoRelativePath">
            <summary>
            Path relative to the repository root that this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents.
            Directories are delimited with forward slashes.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsRoot">
            <summary>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> represents the root of the repository.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.FilterPath.IsRelative">
            <summary>
            Was the original pathspec parsed as a relative path?
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.Normalize(System.String,System.String)">
            <summary>
            Normalizes a pathspec-like string into a root-relative path.
            </summary>
            <param name="path">
            See <see cref="M:Nerdbank.GitVersioning.FilterPath.#ctor(System.String,System.String)"/> for supported
            formats of pathspecs.
            </param>
            <param name="relativeTo">
            Path that <paramref name="path"/> is relative to.
            Can be empty - which indicates <paramref name="path"/> is
            relative to the root of the repository.
            </param>
            <returns>
            Forward slash delimited string representing the root-relative path.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.#ctor(System.String,System.String)">
             <summary>
             Construct a <see cref="T:Nerdbank.GitVersioning.FilterPath"/> from a pathspec-like string and a
             relative path within the repository.
             </summary>
             <param name="pathSpec">
             A string that supports some pathspec features.
             This path is relative to <paramref name="relativeTo"/>.
            
             Examples:
             - <c>../relative/inclusion.txt</c>
             - <c>:/absolute/inclusion.txt</c>
             - <c>:!relative/exclusion.txt</c>
             - <c>:^relative/exclusion.txt</c>
             - <c>:^/absolute/exclusion.txt</c>
             </param>
             <param name="relativeTo">
             Path (relative to the root of the repository) that <paramref name="pathSpec"/> is relative to.
             Can be empty - which indicates <paramref name="pathSpec"/> is
             relative to the root of the repository.
             </param>
             <exception cref="T:System.FormatException">Invalid path spec.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.Excludes(System.String,System.Boolean)">
            <summary>
            Determines if <paramref name="repoRelativePath"/> should be excluded by this <see cref="T:Nerdbank.GitVersioning.FilterPath"/>.
            </summary>
            <param name="repoRelativePath">Forward-slash delimited path (repo relative).</param>
            <param name="ignoreCase">
            Whether paths should be compared case insensitively.
            Should be the 'core.ignorecase' config value for the repository.
            </param>
            <returns>
            True if this <see cref="T:Nerdbank.GitVersioning.FilterPath"/> is an excluding filter that matches
            <paramref name="repoRelativePath"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.FilterPath.ToPathSpec(System.String)">
            <summary>
            Convert this path filter to a pathspec.
            </summary>
            <param name="repoRelativeBaseDirectory">
            Repo-relative directory that relative pathspecs should be relative to.
            Can be empty - which indicates this <c>FilterPath</c> is
            relative to the root of the repository.
            </param>
            <returns>String representation of a path filter (a pathspec)</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.GitExtensions">
            <summary>
            Git extension methods.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitExtensions.Version0">
            <summary>
            The 0.0 version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitExtensions.SemVer0">
            <summary>
            The 0.0 semver.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.GitExtensions.MaximumBuildNumberOrRevisionComponent">
            <summary>
            Maximum allowable value for the <see cref="P:System.Version.Build"/>
            and <see cref="P:System.Version.Revision"/> components.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Commit,System.String,System.Version)">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at <paramref name="commit"/>.
            </summary>
            <param name="commit">The commit to measure the height of.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory for which to calculate the version.</param>
            <param name="baseVersion">Optional base version to calculate the height. If not specified, the base version will be calculated by scanning the repository.</param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Repository,System.String)">
            <summary>
            Gets the number of commits in the longest single path between
            HEAD in a repo and the most distant ancestor (inclusive)
            that set the version to the value in the working copy
            (or HEAD for bare repositories).
            </summary>
            <param name="repo">The repo with the working copy / HEAD to measure the height of.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory for which to calculate the version.</param>
            <returns>The height of the repo at HEAD. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Branch,System.String)">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at the tip of the <paramref name="branch"/>.
            </summary>
            <param name="branch">The branch to measure the height of.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory for which to calculate the version.</param>
            <returns>The height of the branch till the version is changed.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetHeight(LibGit2Sharp.Commit,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive).
            </summary>
            <param name="commit">The commit to measure the height of.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetHeight(LibGit2Sharp.Commit,System.String,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive).
            </summary>
            <param name="commit">The commit to measure the height of.</param>
            <param name="repoRelativeProjectDirectory">The path to the directory of the project whose version is being queried, relative to the repo root.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the commit. Always a positive integer.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetHeight(LibGit2Sharp.Branch,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified branch's head and the most distant ancestor (inclusive).
            </summary>
            <param name="branch">The branch to measure the height of.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the branch.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetHeight(LibGit2Sharp.Branch,System.String,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified branch's head and the most distant ancestor (inclusive).
            </summary>
            <param name="branch">The branch to measure the height of.</param>
            <param name="repoRelativeProjectDirectory">The path to the directory of the project whose version is being queried, relative to the repo root.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the branch.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetTruncatedCommitIdAsInt32(LibGit2Sharp.Commit)">
            <summary>
            Takes the first 4 bytes of a commit ID (i.e. first 8 characters of its hex-encoded SHA)
            and returns them as an integer.
            </summary>
            <param name="commit">The commit to identify with an integer.</param>
            <returns>The integer which identifies a commit.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetTruncatedCommitIdAsUInt16(LibGit2Sharp.Commit)">
            <summary>
            Takes the first 2 bytes of a commit ID (i.e. first 4 characters of its hex-encoded SHA)
            and returns them as an 16-bit unsigned integer.
            </summary>
            <param name="commit">The commit to identify with an integer.</param>
            <returns>The unsigned integer which identifies a commit.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetCommitFromTruncatedIdInteger(LibGit2Sharp.Repository,System.Int32)">
            <summary>
            Looks up a commit by an integer that captures the first for bytes of its ID.
            </summary>
            <param name="repo">The repo to search for a matching commit.</param>
            <param name="truncatedId">The value returned from <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetTruncatedCommitIdAsInt32(LibGit2Sharp.Commit)"/>.</param>
            <returns>A matching commit.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetRepository(LibGit2Sharp.IBelongToARepository)">
            <summary>
            Returns the repository that <paramref name="repositoryMember"/> belongs to.
            </summary>
            <param name="repositoryMember">Member of the repository.</param>
            <returns>Repository that <paramref name="repositoryMember"/> belongs to.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetIdAsVersion(LibGit2Sharp.Commit,System.String,System.Nullable{System.Int32})">
            <summary>
            Encodes a commit from history in a <see cref="T:System.Version"/>
            so that the original commit can be found later.
            </summary>
            <param name="commit">The commit whose ID and position in history is to be encoded.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory for which to calculate the version.</param>
            <param name="versionHeight">
            The version height, previously calculated by a call to <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Commit,System.String,System.Version)"/>
            with the same value for <paramref name="repoRelativeProjectDirectory"/>.
            </param>
            <returns>
            A version whose <see cref="P:System.Version.Build"/> and
            <see cref="P:System.Version.Revision"/> components are calculated based on the commit.
            </returns>
            <remarks>
            In the returned version, the <see cref="P:System.Version.Build"/> component is
            the height of the git commit while the <see cref="P:System.Version.Revision"/>
            component is the first four bytes of the git commit id (forced to be a positive integer).
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetIdAsVersion(LibGit2Sharp.Repository,System.String,System.Nullable{System.Int32})">
            <summary>
            Encodes HEAD (or a modified working copy) from history in a <see cref="T:System.Version"/>
            so that the original commit can be found later.
            </summary>
            <param name="repo">The repo whose ID and position in history is to be encoded.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory for which to calculate the version.</param>
            <param name="versionHeight">
            The version height, previously calculated by a call to <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Commit,System.String,System.Version)"/>
            with the same value for <paramref name="repoRelativeProjectDirectory"/>.
            </param>
            <returns>
            A version whose <see cref="P:System.Version.Build"/> and
            <see cref="P:System.Version.Revision"/> components are calculated based on the commit.
            </returns>
            <remarks>
            In the returned version, the <see cref="P:System.Version.Build"/> component is
            the height of the git commit while the <see cref="P:System.Version.Revision"/>
            component is the first four bytes of the git commit id (forced to be a positive integer).
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetCommitFromVersion(LibGit2Sharp.Repository,System.Version,System.String)">
            <summary>
            Looks up the commit that matches a specified version number.
            </summary>
            <param name="repo">The repository to search for a matching commit.</param>
            <param name="version">The version previously obtained from <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetIdAsVersion(LibGit2Sharp.Commit,System.String,System.Nullable{System.Int32})"/>.</param>
            <param name="repoRelativeProjectDirectory">
            The repo-relative project directory from which <paramref name="version"/> was originally calculated.
            </param>
            <returns>The matching commit, or <c>null</c> if no match is found.</returns>
            <exception cref="T:System.InvalidOperationException">
            Thrown in the very rare situation that more than one matching commit is found.
            </exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetCommitsFromVersion(LibGit2Sharp.Repository,System.Version,System.String)">
            <summary>
            Looks up the commits that match a specified version number.
            </summary>
            <param name="repo">The repository to search for a matching commit.</param>
            <param name="version">The version previously obtained from <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetIdAsVersion(LibGit2Sharp.Commit,System.String,System.Nullable{System.Int32})"/>.</param>
            <param name="repoRelativeProjectDirectory">The repo-relative project directory from which <paramref name="version"/> was originally calculated.</param>
            <returns>The matching commits, or an empty enumeration if no match is found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.HelpFindLibGit2NativeBinaries(System.String)">
            <summary>
            Assists the operating system in finding the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <exception cref="T:System.ArgumentException">Thrown if the provided path does not lead to an existing directory.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.HelpFindLibGit2NativeBinaries(System.String,System.String@)">
            <summary>
            Assists the operating system in finding the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <param name="attemptedDirectory">Receives the directory that native binaries are expected.</param>
            <exception cref="T:System.ArgumentException">Thrown if the provided path does not lead to an existing directory.</exception>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.TryHelpFindLibGit2NativeBinaries(System.String)">
            <summary>
            Assists the operating system in finding the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <returns><c>true</c> if the libgit2 native binaries have been found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.TryHelpFindLibGit2NativeBinaries(System.String,System.String@)">
            <summary>
            Assists the operating system in finding the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <param name="attemptedDirectory">Receives the directory that native binaries are expected.</param>
            <returns><c>true</c> if the libgit2 native binaries have been found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.AddDirectoryToPath(System.String)">
            <summary>
            Add a directory to the PATH environment variable if it isn't already present.
            </summary>
            <param name="directory">The directory to be added.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.FindLibGit2NativeBinaries(System.String)">
            <summary>
            Finds the directory that contains the appropriate native libgit2 module.
            </summary>
            <param name="basePath">The path to the directory that contains the lib folder.</param>
            <returns>Receives the directory that native binaries are expected.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.OpenGitRepo(System.String,System.Boolean)">
            <summary>
            Opens a <see cref="T:LibGit2Sharp.Repository"/> found at or above a specified path.
            </summary>
            <param name="pathUnderGitRepo">The path at or beneath the git repo root.</param>
            <param name="useDefaultConfigSearchPaths">
            Specifies whether to use default settings for looking up global and system settings.
            <para>
            By default (<paramref name="useDefaultConfigSearchPaths"/> == <c>false</c>), the repository will be configured to only
            use the repository-level configuration ignoring system or user-level configuration (set using <c>git config --global</c>.
            Thus only settings explicitly set for the repo will be available.
            </para>
            <para>
            For example using <c>Repository.Configuration.Get{string}("user.name")</c> to get the user's name will
            return the value set in the repository config or <c>null</c> if the user name has not been explicitly set for the repository.
            </para>
            <para>
            When the caller specifies to use the default configuration search paths (<paramref name="useDefaultConfigSearchPaths"/> == <c>true</c>)
            both repository level and global configuration will be available to the repo as well.
            </para>
            <para>
            In this mode, using <c>Repository.Configuration.Get{string}("user.name")</c> will return the
            value set in the user's global git configuration unless set on the repository level,
            matching the behavior of the <c>git</c> command.
            </para>
            </param>
            <returns>The <see cref="T:LibGit2Sharp.Repository"/> found for the specified path, or <c>null</c> if no git repo is found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.CommitMatchesVersion(LibGit2Sharp.Commit,Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.SemanticVersion.Position,Nerdbank.GitVersioning.GitExtensions.GitWalkTracker)">
            <summary>
            Tests whether a commit is of a specified version, comparing major and minor components
            with the version.txt file defined by that commit.
            </summary>
            <param name="commit">The commit to test.</param>
            <param name="expectedVersion">The version to test for in the commit</param>
            <param name="comparisonPrecision">The last component of the version to include in the comparison.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <returns><c>true</c> if the <paramref name="commit"/> matches the major and minor components of <paramref name="expectedVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.CommitMatchesVersion(LibGit2Sharp.Commit,System.Version,Nerdbank.GitVersioning.SemanticVersion.Position,Nerdbank.GitVersioning.GitExtensions.GitWalkTracker)">
            <summary>
            Tests whether a commit's version-spec matches a given version-spec.
            </summary>
            <param name="commit">The commit to test.</param>
            <param name="expectedVersion">The version to test for in the commit</param>
            <param name="comparisonPrecision">The last component of the version to include in the comparison.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <returns><c>true</c> if the <paramref name="commit"/> matches the major and minor components of <paramref name="expectedVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.StartsWith(LibGit2Sharp.ObjectId,System.UInt16,System.UInt16)">
            <summary>
            Tests whether an object's ID starts with the specified 16-bits, or a subset of them.
            </summary>
            <param name="object">The object whose ID is to be tested.</param>
            <param name="leadingBytes">The leading 16-bits to be tested.</param>
            <param name="bitMask">The mask that indicates which bits should be compared.</param>
            <returns><c>True</c> if the object's ID starts with <paramref name="leadingBytes"/> after applying the <paramref name="bitMask"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.EncodeAsHex(System.Byte[])">
            <summary>
            Encodes a byte array as hex.
            </summary>
            <param name="buffer">The buffer to encode.</param>
            <returns>A hexidecimal string.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetCommitHeight(LibGit2Sharp.Commit,Nerdbank.GitVersioning.GitExtensions.GitWalkTracker,System.Func{LibGit2Sharp.Commit,System.Boolean})">
            <summary>
            Gets the number of commits in the longest single path between
            the specified branch's head and the most distant ancestor (inclusive).
            </summary>
            <param name="startingCommit">The commit to measure the height of.</param>
            <param name="tracker">The caching tracker for storing or fetching version information per commit.</param>
            <param name="continueStepping">
            A function that returns <c>false</c> when we reach a commit that
            should not be included in the height calculation.
            May be null to count the height to the original commit.
            </param>
            <returns>The height of the branch.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetCommitsReachableFromRefs(LibGit2Sharp.Repository)">
            <summary>
            Enumerates over the set of commits in the repository that are reachable from any named reference.
            </summary>
            <param name="repo">The repo to search.</param>
            <returns>An enumerate of commits.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.AddReachableCommitsFrom(LibGit2Sharp.Commit,System.Collections.Generic.HashSet{LibGit2Sharp.Commit})">
            <summary>
            Adds a commit and all its ancestors to a set.
            </summary>
            <param name="startingCommit">The starting commit to add.</param>
            <param name="set">
            The set into which the <paramref name="startingCommit"/>
            and all its ancestors are to be added.
            </param>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.GetIdAsVersionHelper(LibGit2Sharp.Commit,Nerdbank.GitVersioning.VersionOptions,System.Int32)">
            <summary>
            Encodes a commit from history in a <see cref="T:System.Version"/>
            so that the original commit can be found later.
            </summary>
            <param name="commit">The commit whose ID and position in history is to be encoded.</param>
            <param name="versionOptions">The version options applicable at this point (either from commit or working copy).</param>
            <param name="versionHeight">The version height, previously calculated by a call to <see cref="M:Nerdbank.GitVersioning.GitExtensions.GetVersionHeight(LibGit2Sharp.Commit,System.String,System.Version)"/>.</param>
            <returns>
            A version whose <see cref="P:System.Version.Build"/> and
            <see cref="P:System.Version.Revision"/> components are calculated based on the commit.
            </returns>
            <remarks>
            In the returned version, the <see cref="P:System.Version.Build"/> component is
            the height of the git commit while the <see cref="P:System.Version.Revision"/>
            component is the first four bytes of the git commit id (forced to be a positive integer).
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.GitExtensions.IsVersionFileChangedInWorkingCopy(LibGit2Sharp.Repository,System.String,Nerdbank.GitVersioning.VersionOptions@,Nerdbank.GitVersioning.VersionOptions@)">
            <summary>
            Gets the version options from HEAD and the working copy (if applicable),
            and tests their equality.
            </summary>
            <param name="repo">The repo to scan for version info.</param>
            <param name="repoRelativeProjectDirectory">The path to the directory of the project whose version is being queried, relative to the repo root.</param>
            <param name="committedVersion">Receives the version options from the HEAD commit.</param>
            <param name="workingCopyVersion">Receives the version options from the working copy, when applicable.</param>
            <returns><c>true</c> if <paramref name="committedVersion"/> and <paramref name="workingCopyVersion"/> are not equal.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ICloudBuild">
            <summary>
            Defines cloud build provider functionality.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.IsApplicable">
            <summary>
            Gets a value indicating whether the active cloud build matches what this instance supports.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.IsPullRequest">
            <summary>
            Gets a value indicating whether a cloud build is validating a pull request.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.BuildingBranch">
            <summary>
            Gets the branch being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.BuildingTag">
            <summary>
            Gets the tag being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ICloudBuild.GitCommitId">
            <summary>
            Gets the git commit ID being built by a cloud build, if applicable.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ICloudBuild.SetCloudBuildNumber(System.String,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Sets the build number for the cloud build, if supported.
            </summary>
            <param name="buildNumber">The build number to set.</param>
            <param name="stdout">An optional redirection for what should be written to the standard out stream.</param>
            <param name="stderr">An optional redirection for what should be written to the standard error stream.</param>
            <returns>A dictionary of environment/build variables that the caller should set to update the environment to match the new settings.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.ICloudBuild.SetCloudBuildVariable(System.String,System.String,System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Sets a cloud build variable, if supported.
            </summary>
            <param name="name">The name of the variable.</param>
            <param name="value">The value for the variable.</param>
            <param name="stdout">An optional redirection for what should be written to the standard out stream.</param>
            <param name="stderr">An optional redirection for what should be written to the standard error stream.</param>
            <returns>A dictionary of environment/build variables that the caller should set to update the environment to match the new settings.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager">
            <summary>
            Methods for creating releases
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError">
            <summary>
            Defines the possible errors that can occur when preparing a release
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.NoGitRepo">
            <summary>
            The project directory is not a git repository
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.UncommittedChanges">
            <summary>
            There are pending changes in the project directory
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.InvalidBranchNameSetting">
            <summary>
            The "branchName" setting in "version.json" is invalid
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.NoVersionFile">
            <summary>
            version.json/version.txt not found
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.VersionDecrement">
            <summary>
            Updating the version would result in a version lower than the previous version
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.BranchAlreadyExists">
            <summary>
            Cannot create a branch because it already exists
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.UserNotConfigured">
            <summary>
            Cannot create a commit because user name and user email are not configured (either at the repo or global level)
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.DetachedHead">
            <summary>
            HEAD is detached. A branch must be checked out first.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError.InvalidVersionIncrementSetting">
            <summary>
            The versionIncrement setting cannot be applied to the current version.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException">
            <summary>
            Exception indicating an error during preparation of a release
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException.Error">
            <summary>
            Gets the error that occurred.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException.#ctor(Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationError)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException"/>
            </summary>
            <param name="error">The error that occurred.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.#ctor(System.IO.TextWriter,System.IO.TextWriter)">
            <summary>
            Initializes a new instance of <see cref="T:Nerdbank.GitVersioning.ReleaseManager"/>
            </summary>
            <param name="outputWriter">The <see cref="T:System.IO.TextWriter"/> to write output to (e.g. <see cref="P:System.Console.Out" />).</param>
            <param name="errorWriter">The <see cref="T:System.IO.TextWriter"/> to write error messages to (e.g. <see cref="P:System.Console.Error" />).</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.ReleaseManager.PrepareRelease(System.String,System.String,System.Version,System.Nullable{Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement})">
            <summary>
            Prepares a release for the specified directory by creating a release branch and incrementing the version in the current branch.
            </summary>
            <exception cref="T:Nerdbank.GitVersioning.ReleaseManager.ReleasePreparationException">Thrown when the release could not be created.</exception>
            <param name="projectDirectory">
            The path to the directory which may (or its ancestors may) define the version file.
            </param>
            <param name="releaseUnstableTag">
            The prerelease tag to add to the version on the release branch. Pass <c>null</c> to omit/remove the prerelease tag.
            The leading hyphen may be specified or omitted.
            </param>
            <param name="nextVersion">
            The next version to save to the version file on the current branch. Pass <c>null</c> to automatically determine the next
            version based on the current version and the <c>versionIncrement</c> setting in <c>version.json</c>.
            Parameter will be ignored if the current branch is a release branch.
            </param>
            <param name="versionIncrement">
            The increment to apply in order to determine the next version on the current branch.
            If specified, value will be used instead of the increment specified in <c>version.json</c>.
            Parameter will be ignored if the current branch is a release branch.
            </param>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersion">
            <summary>
            Describes a version with an optional unstable tag.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.FullSemVerPattern">
            <summary>
            The regular expression with capture groups for semantic versioning.
            It considers PATCH to be optional and permits the 4th Revision component.
            </summary>
            <remarks>
            Parts of this regex inspired by https://github.com/sindresorhus/semver-regex/blob/master/index.js
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.PrereleasePattern">
            <summary>
            The regex pattern that a prerelease must match.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.BuildMetadataPattern">
            <summary>
            The regex pattern that build metadata must match.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.FullSemVerWithMacrosPattern">
            <summary>
            The regular expression with capture groups for semantic versioning,
            allowing for macros such as {height}.
            </summary>
            <remarks>
            Keep in sync with the regex for the version field found in the version.schema.json file.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.#ctor(System.Version,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The numeric version.</param>
            <param name="prerelease">The prerelease, with leading - character.</param>
            <param name="buildMetadata">The build metadata, with leading + character.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> class.
            </summary>
            <param name="version">The x.y.z numeric version.</param>
            <param name="prerelease">The prerelease, with leading - character.</param>
            <param name="buildMetadata">The build metadata, with leading + character.</param>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersion.Position">
            <summary>
            Identifies the various positions in a semantic version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Major">
            <summary>
            The <see cref="P:System.Version.Major"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Minor">
            <summary>
            The <see cref="P:System.Version.Minor"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Build">
            <summary>
            The <see cref="P:System.Version.Build"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Revision">
            <summary>
            The <see cref="P:System.Version.Revision"/> component.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.Prerelease">
            <summary>
            The <see cref="F:Nerdbank.GitVersioning.SemanticVersion.Position.Prerelease"/> portion of the version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersion.Position.BuildMetadata">
            <summary>
            The <see cref="F:Nerdbank.GitVersioning.SemanticVersion.Position.BuildMetadata"/> portion of the version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.Version">
            <summary>
            Gets the version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.Prerelease">
            <summary>
            Gets an unstable tag (with the leading hyphen), if applicable.
            </summary>
            <value>A string with a leading hyphen or the empty string.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.BuildMetadata">
            <summary>
            Gets the build metadata (with the leading plus), if applicable.
            </summary>
            <value>A string with a leading plus or the empty string.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.IsDefault">
            <summary>
            Gets a value indicating whether this instance is the default "0.0" instance.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.SemanticVersion.DebuggerDisplay">
            <summary>
            Gets the debugger display for this instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.TryParse(System.String,Nerdbank.GitVersioning.SemanticVersion@)">
            <summary>
            Parses a semantic version from the given string.
            </summary>
            <param name="semanticVersion">The value which must wholly constitute a semantic version to succeed.</param>
            <param name="version">Receives the semantic version, if found.</param>
            <returns><c>true</c> if a semantic version is found; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Parse(System.String)">
            <summary>
            Parses a semantic version from the given string.
            </summary>
            <param name="semanticVersion">The value which must wholly constitute a semantic version to succeed.</param>
            <returns>An instance of <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/>, initialized to the value specified in <paramref name="semanticVersion"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Equals(System.Object)">
            <summary>
            Checks equality against another object.
            </summary>
            <param name="obj">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.ToString">
            <summary>
            Prints this instance as a string.
            </summary>
            <returns>A string representation of this object.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Equals(Nerdbank.GitVersioning.SemanticVersion)">
            <summary>
            Checks equality against another instance of this class.
            </summary>
            <param name="other">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.Contains(System.Version)">
            <summary>
            Checks whether a particular version number
            belongs to the set of versions represented by this semantic version spec.
            </summary>
            <param name="version">A version, with major and minor components, and possibly build and/or revision components.</param>
            <returns><c>true</c> if <paramref name="version"/> may have been produced by this semantic version; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersion.VerifyPatternMatch(System.String,System.Text.RegularExpressions.Regex,System.String)">
            <summary>
            Verifies that the prerelease tag follows semver rules.
            </summary>
            <param name="input">The input string to test.</param>
            <param name="pattern">The regex that the string must conform to.</param>
            <param name="parameterName">The name of the parameter supplying the <paramref name="input"/>.</param>
            <exception cref="T:System.ArgumentException">
            Thrown if the <paramref name="input"/> does not match the required <paramref name="pattern"/>.
            </exception>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionExtensions">
            <summary>
            Extension methods for the <see cref="T:System.Version"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.EnsureNonNegativeComponents(System.Version,System.Int32)">
            <summary>
            Returns a <see cref="T:System.Version"/> instance where the specified number of components
            are guaranteed to be non-negative. Any applicable negative components are converted to zeros.
            </summary>
            <param name="version">The version to use as a template for the returned value.</param>
            <param name="fieldCount">The number of version components to ensure are non-negative.</param>
            <returns>
            The same as <paramref name="version"/> except with any applicable negative values
            translated to zeros.
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.ToStringSafe(System.Version,System.Int32)">
            <summary>
            Converts the value of the current System.Version object to its equivalent System.String
            representation. A specified count indicates the number of components to return.
            </summary>
            <param name="version">The instance to serialize as a string.</param>
            <param name="fieldCount">The number of components to return. The fieldCount ranges from 0 to 4.</param>
            <returns>
            The System.String representation of the values of the major, minor, build, and
            revision components of the current System.Version object, each separated by a
            period character ('.'). The fieldCount parameter determines how many components
            are returned.fieldCount Return Value 0 An empty string (""). 1 major 2 major.minor
            3 major.minor.build 4 major.minor.build.revision For example, if you create System.Version
            object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4)
            returns "1.3.5.0".
            </returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionExtensions.Create(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Version"/> class,
            allowing for the last two integers to possibly be -1.
            </summary>
            <param name="major">The major version.</param>
            <param name="minor">The minor version.</param>
            <param name="build">The build version.</param>
            <param name="revision">The revision.</param>
            <returns></returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionFile">
            <summary>
            Extension methods for interacting with the version.txt file.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionFile.TxtFileName">
            <summary>
            The filename of the version.txt file.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionFile.JsonFileName">
            <summary>
            The filename of the version.json file.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionFile.PreferredFileNames">
            <summary>
            A sequence of possible filenames for the version file in preferred order.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion(LibGit2Sharp.Commit,System.String)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="commit">The commit to read the version file from.</param>
            <param name="repoRelativeProjectDirectory">The directory to consider when searching for the version.txt file.</param>
            <returns>The version information read from the file.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion(LibGit2Sharp.Repository,System.String)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="repo">The repo to read the version file from.</param>
            <param name="repoRelativeProjectDirectory">The directory to consider when searching for the version.txt file.</param>
            <returns>The version information read from the file.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion(System.String)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="projectDirectory">The path to the directory which may (or its ancestors may) define the version.txt file.</param>
            <returns>The version information read from the file, or <c>null</c> if the file wasn't found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.GetVersion(System.String,System.String@)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="projectDirectory">The path to the directory which may (or its ancestors may) define the version.txt file.</param>
            <param name="actualDirectory">Set to the actual directory that the version file was found in, which may be <paramref name="projectDirectory"/> or one of its ancestors.</param>
            <returns>The version information read from the file, or <c>null</c> if the file wasn't found.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.IsVersionDefined(LibGit2Sharp.Commit,System.String)">
            <summary>
            Checks whether the version.txt file is defined in the specified commit.
            </summary>
            <param name="commit">The commit to search.</param>
            <param name="projectDirectory">The directory to consider when searching for the version.txt file.</param>
            <returns><c>true</c> if the version.txt file is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.IsVersionDefined(System.String)">
            <summary>
            Checks whether the version.txt file is defined in the specified project directory
            or one of its ancestors.
            </summary>
            <param name="projectDirectory">The directory to start searching within.</param>
            <returns><c>true</c> if the version.txt file is found; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,Nerdbank.GitVersioning.VersionOptions)">
            <summary>
            Writes the version.json file to a directory within a repo with the specified version information.
            The $schema property is included.
            </summary>
            <param name="projectDirectory">
            The path to the directory in which to write the version.json file.
            The file's impact will be all descendent projects and directories from this specified directory,
            except where any of those directories have their own version.json file.
            </param>
            <param name="version">The version information to write to the file.</param>
            <returns>The path to the file written.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,Nerdbank.GitVersioning.VersionOptions,System.Boolean)">
            <summary>
            Writes the version.json file to a directory within a repo with the specified version information.
            </summary>
            <param name="projectDirectory">
            The path to the directory in which to write the version.json file.
            The file's impact will be all descendent projects and directories from this specified directory,
            except where any of those directories have their own version.json file.
            </param>
            <param name="version">The version information to write to the file.</param>
            <param name="includeSchemaProperty">A value indicating whether to serialize the $schema property for easier editing in most JSON editors.</param>
            <returns>The path to the file written.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.SetVersion(System.String,System.Version,System.String)">
            <summary>
            Writes the version.txt file to a directory within a repo with the specified version information.
            </summary>
            <param name="projectDirectory">
            The path to the directory in which to write the version.txt file.
            The file's impact will be all descendent projects and directories from this specified directory,
            except where any of those directories have their own version.txt file.
            </param>
            <param name="version">The version information to write to the file.</param>
            <param name="unstableTag">The optional unstable tag to include in the file.</param>
            <returns>The path to the file written.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.TryReadVersionFile(System.IO.TextReader)">
            <summary>
            Reads the version.txt file and returns the <see cref="T:System.Version"/> and prerelease tag from it.
            </summary>
            <param name="versionTextContent">The content of the version.txt file to read.</param>
            <returns>The version information read from the file; or <c>null</c> if a deserialization error occurs.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionFile.TryReadVersionJsonContent(System.String,System.String)">
            <summary>
            Tries to read a version.json file from the specified string, but favors returning null instead of throwing a <see cref="T:Newtonsoft.Json.JsonSerializationException"/>.
            </summary>
            <param name="jsonContent">The content of the version.json file.</param>
            <param name="repoRelativeBaseDirectory">Directory that this version.json file is relative to the root of the repository.</param>
            <returns>The deserialized <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> object, if deserialization was successful.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions">
            <summary>
            Describes the various versions and options required for the build.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultVersionPrecision">
            <summary>
            Default value for <see cref="T:Nerdbank.GitVersioning.VersionOptions.VersionPrecision"/>.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionHeightPlaceholder">
            <summary>
            The placeholder that may appear in the <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> property's <see cref="P:Nerdbank.GitVersioning.SemanticVersion.Prerelease"/>
            to specify where the version height should appear in a computed semantic version.
            </summary>
            <remarks>
            When this macro does not appear in the string, the version height is set as the first unspecified integer of the 4-integer version.
            If all 4 integers in a version are specified, and the macro does not appear, the version height isn't inserted anywhere.
            </remarks>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultSemVer1NumericIdentifierPadding">
            <summary>
            The default value for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPaddingOrDefault"/> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.DefaultGitCommitIdShortFixedLength">
            <summary>
            The default value for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength"/> property.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Schema">
            <summary>
            The $schema field that should be serialized when writing
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Version">
            <summary>
            Gets or sets the default version to use.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersion">
            <summary>
            Gets or sets the version to use particularly for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>
            instead of the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.
            </summary>
            <value>An instance of <see cref="T:System.Version"/> or <c>null</c> to simply use the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPrefix">
            <summary>
            Gets or sets the prefix for git commit id in version.
            Because of semver rules the prefix must lead with a [A-z_] character (not a number) and it cannot be the empty string.
            If <c>null</c> 'g' will be used.
            </summary>
            <value>A prefix for git commit id.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOrDefault">
            <summary>
            Gets the version to use particularly for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>
            instead of the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.
            </summary>
            <value>An instance of <see cref="T:System.Version"/> or <c>null</c> to simply use the default <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/>.</value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.BuildNumberOffset">
            <summary>
            Gets or sets a number to add to the git height when calculating the version height,
            which typically is used in the <see cref="P:System.Version.Build"/> portion of the computed version.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightOffset">
            <summary>
            Gets or sets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.BuildNumberOffsetOrDefault">
            <summary>
            Gets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightOffsetOrDefault">
            <summary>
            Gets a number to add to the git height when calculating the <see cref="P:System.Version.Build"/> number.
            </summary>
            <value>Any integer (0, positive, or negative).</value>
            <remarks>
            An error will result if this value is negative with such a magnitude as to exceed the git height,
            resulting in a negative build number.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPadding">
            <summary>
            Gets or sets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.SemVer1NumericIdentifierPaddingOrDefault">
            <summary>
            Gets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength">
            <summary>
            Gets or sets the abbreviated git commit hash length.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortAutoMinimum">
            <summary>
            Gets or sets the abbreviated git commit hash length minimum value.
            The git repository provides the value.
            If set to 0 or a git repository is not available, <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdShortFixedLength"/> is used.
            The value is 0 by default.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersion">
            <summary>
            Gets or sets the options around NuGet version strings
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOrDefault">
            <summary>
            Gets the options around NuGet version strings
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PublicReleaseRefSpec">
            <summary>
            Gets or sets an array of regular expressions that describes branch or tag names that should
            be built with PublicRelease=true as the default value on build servers.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PublicReleaseRefSpecOrDefault">
            <summary>
            Gets an array of regular expressions that describes branch or tag names that should
            be built with PublicRelease=true as the default value on build servers.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuild">
            <summary>
            Gets or sets the options around cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOrDefault">
            <summary>
            Gets the options around cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Release">
            <summary>
            Gets or sets the options for the prepare-release command
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOrDefault">
            <summary>
            Gets the options for the prepare-release command
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.PathFilters">
            <summary>
            Gets or sets a list of paths to use to filter commits when calculating version height.
            If a given commit does not affect any paths in this filter, it is ignored for version height calculations.
            Paths should be relative to the root of the repository.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.Inherit">
            <summary>
            Gets or sets a value indicating whether this options object should inherit from an ancestor any settings that are not explicitly set in this one.
            </summary>
            <remarks>
            When this is <c>true</c>, this object may not completely describe the options to be applied.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.VersionHeightPosition">
            <summary>
            Gets the position in a computed version that the version height should appear.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPosition">
            <summary>
            Gets the position in a computed version that the first 16 bits of a git commit ID should appear, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.DebuggerDisplay">
            <summary>
            Gets the debugger display for this instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.FromVersion(System.Version,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions"/> class
            with <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> initialized with the specified parameters.
            </summary>
            <param name="version">The version number.</param>
            <param name="unstableTag">The prerelease tag, if any.</param>
            <returns>The new instance of <see cref="T:Nerdbank.GitVersioning.VersionOptions"/>.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            The $schema property is not serialized when using this overload.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean,System.Boolean)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            Path filters cannot be serialized or deserialized when using this overload.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <param name="includeSchemaProperty">A value indicating whether the $schema property should be serialized.</param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetJsonSettings(System.Boolean,System.Boolean,System.String)">
            <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> to use based on certain requirements.
            </summary>
            <param name="includeDefaults">A value indicating whether default values should be serialized.</param>
            <param name="includeSchemaProperty">A value indicating whether the $schema property should be serialized.</param>
            <param name="repoRelativeBaseDirectory">
            Directory (relative to the root of the repository) that path
            filters should be relative to.
            This should be the directory where the version.json file resides.
            An empty string represents the root of the repository.
            Passing <c>null</c> will mean path filters cannot be serialized.
            </param>
            <returns>The serializer settings to use.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.Equals(System.Object)">
            <summary>
            Checks equality against another object.
            </summary>
            <param name="obj">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.GetHashCode">
            <summary>
            Gets a hash code for this instance.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions)">
            <summary>
            Checks equality against another instance of this class.
            </summary>
            <param name="other">The other instance.</param>
            <returns><c>true</c> if the instances have equal values; <c>false</c> otherwise.</returns>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.IsDefaultVersionTheOnlyPropertySet">
            <summary>
            Gets a value indicating whether <see cref="P:Nerdbank.GitVersioning.VersionOptions.Version"/> is
            set and the only property on this class that is set.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions">
            <summary>
            The class that contains settings for the <see cref="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersion" /> property.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions" /> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions" /> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SemVer">
            <summary>
            Gets or sets the version of SemVer (e.g. 1 or 2) that should be used when generating the package version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SemVerOrDefault">
            <summary>
            Gets the version of SemVer (e.g. 1 or 2) that should be used when generating the package version.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions,Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.NuGetPackageVersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions">
            <summary>
            Describes the details of how the AssemblyVersion value will be calculated.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor(System.Version,System.Nullable{Nerdbank.GitVersioning.VersionOptions.VersionPrecision})">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
            <param name="version">The assembly version (with major.minor components).</param>
            <param name="precision">The additional version precision to add toward matching the AssemblyFileVersion.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Version">
            <summary>
            Gets or sets the major.minor components of the assembly version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Precision">
            <summary>
            Gets or sets the additional version precision to add toward matching the AssemblyFileVersion.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.PrecisionOrDefault">
            <summary>
            Gets the additional version precision to add toward matching the AssemblyFileVersion.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.Equals(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions,Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.AssemblyVersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions">
            <summary>
            Options that are applicable specifically to cloud builds (e.g. VSTS, AppVeyor, TeamCity)
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetAllVariables">
            <summary>
            Gets or sets a value indicating whether to elevate all build properties to cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetVersionVariables">
            <summary>
            Gets or sets a value indicating whether to elevate certain calculated version build properties to cloud build variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetAllVariablesOrDefault">
            <summary>
            Gets a value indicating whether to elevate all build properties to cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetVersionVariablesOrDefault">
            <summary>
            Gets a value indicating whether to elevate certain calculated version build properties to cloud build variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.BuildNumber">
            <summary>
            Gets or sets options around how and whether to set the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.BuildNumberOrDefault">
            <summary>
            Gets options around how and whether to set the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions">
            <summary>
            Override the build number preset by the cloud build with one enriched with version information.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Enabled">
            <summary>
            Gets or sets a value indicating whether to override the build number preset by the cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EnabledOrDefault">
            <summary>
            Gets a value indicating whether to override the build number preset by the cloud build.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IncludeCommitId">
            <summary>
            Gets or sets when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IncludeCommitIdOrDefault">
            <summary>
            Gets when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions">
            <summary>
            Describes when and where to include information about the git commit being built.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.When">
            <summary>
            Gets or sets the conditions when the commit ID is included in the build number.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.WhenOrDefault">
            <summary>
            Gets the conditions when the commit ID is included in the build number.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Where">
            <summary>
            Gets or sets the position to include the commit ID information.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.WhereOrDefault">
            <summary>
            Gets the position to include the commit ID information.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions,Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitIdOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions,Nerdbank.GitVersioning.VersionOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.VersionPrecision">
            <summary>
            The last component to control in a 4 integer version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Major">
            <summary>
            The first integer is the last number set. The rest will be zeros.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Minor">
            <summary>
            The second integer is the last number set. The rest will be zeros.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Build">
            <summary>
            The third integer is the last number set. The fourth will be zero.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.VersionPrecision.Revision">
            <summary>
            All four integers will be set.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen">
            <summary>
            The conditions a commit ID is included in a cloud build number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.Always">
            <summary>
            Always include the commit information in the cloud Build Number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.NonPublicReleaseOnly">
            <summary>
            Only include the commit information when building a non-PublicRelease.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhen.Never">
            <summary>
            Never include the commit information.
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere">
            <summary>
            The position a commit ID can appear in a cloud build number.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere.BuildMetadata">
            <summary>
            The commit ID appears in build metadata (e.g. +ga1b2c3).
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.CloudBuildNumberCommitWhere.FourthVersionComponent">
            <summary>
            The commit ID appears as the 4th integer in the version (e.g. 1.2.3.23523).
            </summary>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions">
            <summary>
            Encapsulates settings for the "prepare-release" command
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.DefaultInstance">
            <summary>
            The default (uninitialized) instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions"/> class
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions"/> class
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.BranchName">
            <summary>
            Gets or sets the branch name template for release branches
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.BranchNameOrDefault">
            <summary>
            Gets the set branch name template for release branches
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.VersionIncrement">
            <summary>
            Gets or sets the setting specifying how to increment the version when creating a release
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.VersionIncrementOrDefault">
            <summary>
            Gets or sets the setting specifying how to increment the version when creating a release.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.FirstUnstableTag">
            <summary>
            Gets or sets the first/default prerelease tag for new versions.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.FirstUnstableTagOrDefault">
            <summary>
            Gets or sets the first/default prerelease tag for new versions.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.Equals(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.GetHashCode">
            <inheritdoc />
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.IsDefault">
            <summary>
            Gets a value indicating whether this instance is equivalent to the default instance.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.SetIfNotReadOnly``1(``0@,``0)">
            <summary>
            Sets the value of a field if this instance is not marked as read only.
            </summary>
            <typeparam name="T">The type of the value stored by the field.</typeparam>
            <param name="field">The field to change.</param>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.EqualWithDefaultsComparer.Equals(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions,Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptions.ReleaseOptions.EqualWithDefaultsComparer.GetHashCode(Nerdbank.GitVersioning.VersionOptions.ReleaseOptions)">
            <inheritdoc />
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement">
            <summary>
            Possible increments of the version after creating release branches
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Major">
            <summary>
            Increment the major version after creating a release branch
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Minor">
            <summary>
            Increment the minor version after creating a release branch
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement.Build">
            <summary>
            Increment the build number (the third number in a version) after creating a release branch.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOptionsContractResolver.ResolveContract(System.Type)">
            <summary>
            Obtains a contract for a given type.
            </summary>
            <param name="type">The type to obtain a contract for.</param>
            <returns>The contract.</returns>
            <remarks>
            This override changes the caching policy from the base class, which caches based on this.GetType().
            The inherited policy is problematic because we have instance properties that change the contract.
            So instead, we cache with a complex key to capture the settings as well.
            </remarks>
        </member>
        <member name="T:Nerdbank.GitVersioning.VersionOracle">
            <summary>
            Assembles version information in a variety of formats.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOracle.Version0">
            <summary>
            The 0.0 version.
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.VersionOracle.SemVer0">
            <summary>
            The 0.0 semver.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.Create(System.String,System.String,Nerdbank.GitVersioning.ICloudBuild,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOracle"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.#ctor(System.String,LibGit2Sharp.Repository,Nerdbank.GitVersioning.ICloudBuild,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOracle"/> class.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.#ctor(System.String,LibGit2Sharp.Repository,LibGit2Sharp.Commit,Nerdbank.GitVersioning.ICloudBuild,System.Nullable{System.Int32},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Nerdbank.GitVersioning.VersionOracle"/> class.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumber">
            <summary>
            Gets the BuildNumber to set the cloud build to (if applicable).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildNumberEnabled">
            <summary>
            Gets a value indicating whether the cloud build number should be set.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadataWithCommitId">
            <summary>
            Gets the build metadata identifiers, including the git commit ID as the first identifier if appropriate.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionFileFound">
            <summary>
            Gets a value indicating whether a version.json or version.txt file was found.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionOptions">
            <summary>
            Gets the version options used to initialize this instance.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyFileVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyFileVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.AssemblyInformationalVersion">
            <summary>
            Gets the version string to use for the <see cref="T:System.Reflection.AssemblyInformationalVersionAttribute"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease">
            <summary>
            Gets or sets a value indicating whether the project is building
            in PublicRelease mode.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PrereleaseVersion">
            <summary>
            Gets the prerelease version information, including a leading hyphen.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.PrereleaseVersionNoLeadingHyphen">
            <summary>
            Gets the prerelease version information, omitting the leading hyphen, if any.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SimpleVersion">
            <summary>
            Gets the version information without a Revision component.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildNumber">
            <summary>
            Gets the build number (i.e. third integer, or PATCH) for this version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionRevision">
            <summary>
            Gets the <see cref="P:System.Version.Revision"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.MajorMinorVersion">
            <summary>
            Gets the major.minor version string.
            </summary>
            <value>
            The x.y string (no build number or revision number).
            </value>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionMajor">
            <summary>
            Gets the <see cref="P:System.Version.Major"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionMinor">
            <summary>
            Gets the <see cref="P:System.Version.Minor"/> component of the <see cref="P:Nerdbank.GitVersioning.VersionOracle.Version"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitId">
            <summary>
            Gets the Git revision control commit id for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitIdShort">
            <summary>
            Gets the first several characters of the Git revision control commit id for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitDate">
            <summary>
            Gets the Git revision control commit date for HEAD (the current source code version).
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionHeight">
            <summary>
            Gets the number of commits in the longest single path between
            the specified commit and the most distant ancestor (inclusive)
            that set the version to the value at HEAD.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.VersionHeightOffset">
            <summary>
            The offset to add to the <see cref="P:Nerdbank.GitVersioning.VersionOracle.VersionHeight"/>
            when calculating the integer to use as the <see cref="P:Nerdbank.GitVersioning.VersionOracle.BuildNumber"/>
            or elsewhere that the {height} macro is used.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildingRef">
            <summary>
            Gets the ref (branch or tag) being built.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.Version">
            <summary>
            Gets the version for this project, with up to 4 components.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVarsEnabled">
            <summary>
            Gets a value indicating whether to set all cloud build variables prefaced with "NBGV_".
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVars">
            <summary>
            Gets a dictionary of all cloud build variables that applies to this project,
            regardless of the current setting of <see cref="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildAllVarsEnabled"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVarsEnabled">
            <summary>
            Gets a value indicating whether to set cloud build version variables.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVars">
            <summary>
            Gets a dictionary of cloud build variables that applies to this project,
            regardless of the current setting of <see cref="P:Nerdbank.GitVersioning.VersionOracle.CloudBuildVersionVarsEnabled"/>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadata">
            <summary>
            Gets the list of build metadata identifiers to include in semver version strings.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.BuildMetadataFragment">
            <summary>
            Gets the +buildMetadata fragment for the semantic version.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetPackageVersion">
            <summary>
            Gets the version to use for NuGet packages.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.ChocolateyPackageVersion">
            <summary>
            Gets the version to use for Chocolatey packages.
            </summary>
            <remarks>
            This always returns the NuGet subset of SemVer 1.0.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NpmPackageVersion">
            <summary>
            Gets the version to use for NPM packages.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1">
            <summary>
            Gets a SemVer 1.0 compliant string that represents this version, including the -COMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer2">
            <summary>
            Gets a SemVer 2.0 compliant string that represents this version, including a +COMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1NumericIdentifierPadding">
            <summary>
            Gets the minimum number of digits to use for numeric identifiers in SemVer 1.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetSemVer1BuildMetadata">
            <summary>
            Gets the build metadata, compliant to the NuGet-compatible subset of SemVer 1.0.
            </summary>
            <remarks>
            When adding the git commit ID in a -prerelease tag, prefix a `g` because
            older NuGet clients (the ones that support only a subset of semver 1.0)
            cannot handle prerelease tags that begin with a number (which a git commit ID might).
            See <see href="https://github.com/dotnet/Nerdbank.GitVersioning/issues/260#issuecomment-445511898">this discussion</see>.
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer1BuildMetadata">
            <summary>
            Gets the build metadata, compliant to SemVer 1.0.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.NuGetSemVer1">
            <summary>
            Gets a SemVer 1.0 compliant string that represents this version, including the -gCOMMITID suffix
            when <see cref="P:Nerdbank.GitVersioning.VersionOracle.PublicRelease"/> is <c>false</c>.
            </summary>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.SemVer2BuildMetadata">
            <summary>
            Gets the build metadata that is appropriate for SemVer2 use.
            </summary>
            <remarks>
            We always put the commit ID in the -prerelease tag for non-public releases.
            But for public releases, we don't include it in the +buildMetadata section since it may be confusing for NuGet.
            See https://github.com/dotnet/Nerdbank.GitVersioning/pull/132#issuecomment-307208561
            </remarks>
        </member>
        <member name="P:Nerdbank.GitVersioning.VersionOracle.GitCommitIdShortForNonPublicPrereleaseTag">
            <summary>
            Gets the -gc0ffee or .gc0ffee suffix for the version.
            The g in the prefix might be changed if <see cref="P:Nerdbank.GitVersioning.VersionOptions.GitCommitIdPrefix"/> is set.
            </summary>
            <remarks>
            The prefix to the commit ID is to remain SemVer2 compliant particularly when the partial commit ID we use is made up entirely of numerals.
            SemVer2 forbids numerals to begin with leading zeros, but a git commit just might, so we begin with prefix always to avoid failures when the commit ID happens to be problematic.
            </remarks>
        </member>
        <member name="M:Nerdbank.GitVersioning.VersionOracle.ReplaceMacros(System.String)">
            <summary>
            Replaces any macros found in a prerelease or build metadata string.
            </summary>
            <param name="prereleaseOrBuildMetadata">The prerelease or build metadata.</param>
            <returns>The specified string, with macros substituted for actual values.</returns>
        </member>
        <member name="T:Nerdbank.GitVersioning.SemanticVersionExtensions">
            <summary>
            Extension methods for <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/>
            </summary>
        </member>
        <member name="F:Nerdbank.GitVersioning.SemanticVersionExtensions.NumericIdentifierRegex">
            <summary>
            A regex that matches on numeric identifiers for prerelease or build metadata.
            </summary>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.Increment(Nerdbank.GitVersioning.SemanticVersion,Nerdbank.GitVersioning.VersionOptions.ReleaseVersionIncrement)">
            <summary>
            Gets a new semantic with the specified version component (major/minor) incremented.
            </summary>
            <param name="currentVersion">The version to increment.</param>
            <param name="increment">Specifies whether to increment the major or minor version.</param>
            <returns>Returns a new <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> object with either the major or minor version incremented by 1.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.SetFirstPrereleaseTag(Nerdbank.GitVersioning.SemanticVersion,System.String)">
            <summary>
            Sets the first prerelease tag of the specified semantic version to the specified value.
            </summary>
            <param name="version">The version which's prerelease tag to modify.</param>
            <param name="newFirstTag">The new prerelease tag. The leading hyphen may be specified or omitted.</param>
            <returns>Returns a new instance of <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> with the updated prerelease tag</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.WithoutPrepreleaseTags(Nerdbank.GitVersioning.SemanticVersion)">
            <summary>
            Removes all prerelease tags from the semantic version.
            </summary>
            <param name="version">The version to remove the prerelease tags from.</param>
            <returns>Returns a new instance <see cref="T:Nerdbank.GitVersioning.SemanticVersion"/> which does not contain any prerelease tags.</returns>
        </member>
        <member name="M:Nerdbank.GitVersioning.SemanticVersionExtensions.MakePrereleaseSemVer1Compliant(System.String,System.Int32)">
            <summary>
            Converts a semver 2 compliant "-beta.5" prerelease tag to a semver 1 compatible one.
            </summary>
            <param name="prerelease">The semver 2 prerelease tag, including its leading hyphen.</param>
            <param name="paddingSize">The minimum number of digits to use for any numeric identifier.</param>
            <returns>A semver 1 compliant prerelease tag. For example "-beta-0005".</returns>
        </member>
    </members>
</doc>
