# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- feat/*
- fix/*
- chore/*

stages:
- stage: Build
  variables:
    buildConfiguration: 'Release'
    dockerId: marcelmichau
    apiImageName: fakesurveygeneratorapi
    uiImageName: fakesurveygeneratorui
    versionTag: $(build.buildNumber)
  jobs:
    - job: Build_API
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: DotNetCoreInstaller@0
        displayName: 'Install .net core 3.0 (preview)'
        inputs:
          version: '3.0.100-preview8-013656'

      - script: dotnet build FakeSurveyGenerator.sln --configuration $(buildConfiguration)
        displayName: 'Build Solution'

      - script: dotnet test src/server/FakeSurveyGenerator.Domain.Tests/FakeSurveyGenerator.Domain.Tests.csproj --logger trx
        displayName: 'Run Unit Tests'

      - script: dotnet test src/server/FakeSurveyGenerator.API.Tests.Integration/FakeSurveyGenerator.API.Tests.Integration.csproj --logger trx
        displayName: 'Run Integration Tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
        displayName: 'Publish Test Results'

      - script: |
          dotnet tool install --global dotnet-ef --version 3.0.0-preview8.19405.11
        displayName: 'Install EF Core Global Tool'

      - script: |
          dotnet ef migrations script -o DbMigrationScript.sql -i
        workingDirectory: src/server/FakeSurveyGenerator.EF.Design
        displayName: 'Create Database Migration Script'

      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: 'src/server/FakeSurveyGenerator.EF.Design/DbMigrationScript.sql'
          artifact: 'DbMigrationScript'
        displayName: 'Publish Database Migration Script'

      - script: |
          docker build -t $(dockerId)/$(apiImageName):$(versionTag) -t $(dockerId)/$(apiImageName):latest -f src/server/FakeSurveyGenerator.API/Dockerfile .
        displayName: 'Build Docker Images'

      - script: |
          echo "$DOCKER_PASSWORD" | docker login -u $(dockerId) --password-stdin
          docker push $(dockerId)/$(apiImageName)
        env:
          DOCKER_PASSWORD: $(dockerPassword)
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Push Docker Images to Docker Hub'

    - job: Build_UI
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - script: |
            docker build -t $(dockerId)/$(uiImageName):$(versionTag) -t $(dockerId)/$(uiImageName):latest -f src/client/ui/Dockerfile .
        displayName: 'Build Docker Images'
      - script: |
          echo "$DOCKER_PASSWORD" | docker login -u $(dockerId) --password-stdin
          docker push $(dockerId)/$(uiImageName)
        env:
          DOCKER_PASSWORD: $(dockerPassword)
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Push Docker Images to Docker Hub'

- stage: Publish_Chart
  variables:
    versionTag: $(build.buildNumber)
  jobs:
    - job: Publish_Chart
      pool:
        vmImage: 'ubuntu-latest'
      steps:
            - task: HelmInstaller@1
              inputs:
                helmVersionToInstall: 'latest'
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              displayName: 'Install Helm'

            - task: HelmDeploy@0
              inputs:
                command: 'package'
                arguments: '--version $(versionTag)'
                chartPath: 'charts/fakesurveygenerator'
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              displayName: 'Helm Package'

            - task: AzureCLI@1
              inputs:
                azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
                scriptLocation: 'inlineScript'
                inlineScript: 'az configure --defaults acr=$(registryName)'
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              displayName: 'Set Azure Container Registry Default in Azure CLI'

            - task: AzureCLI@1
              inputs:
                azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
                scriptLocation: 'inlineScript'
                inlineScript: 'az acr helm repo add'
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              displayName: 'Add Azure Container Registry Repo to Azure CLI'

            - task: AzureCLI@1
              inputs:
                azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
                scriptLocation: 'inlineScript'
                inlineScript: 'az acr helm push $(Build.ArtifactStagingDirectory)/$(projectName)-$(versionTag).tgz'
              condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
              displayName: 'Push Helm Chart to Azure Container Registry'

- stage: Deployment_Stage
  jobs:
    - deployment: Deployment_Job
      displayName: Deploy Fake Survey Generator
      pool:
        vmImage: 'ubuntu-latest'
      variables:
        apiDatabaseName: fake-survey-generator-db-test
        apiDatabaseUser: fake-survey-generator-api-test
        databaseServer: $(databaseServerTestStage)
        databaseLogin: azure-pipelines-user-test
        environmentSuffix: test
        ingressClusterIssuerName: letsencrypt-prod
        ingressHost: aks-test.fakesurveygenerator.marcelmichau.dev
        ingressTlsSecretName: marcelmichau-dev-tls-secret
        redisDefaultDatabase: 0
        replicaCount: 2
        targetNamespace: test-env
      environment: 'aks-test'
      strategy:
       runOnce:
         deploy:
           steps:
           - task: KubectlInstaller@0
             displayName: 'Install Kubectl latest'

           - task: HelmInstaller@1
             displayName: 'Install Helm 2.14.0'

           - task: HelmDeploy@0
             inputs:
               connectionType: 'Kubernetes Service Connection'
               kubernetesServiceConnection: 'Azure Kubernetes Service - Test Environment-kubernetes-cluster-v3-test-env-1568272352006'
               command: 'init'
               arguments: '--service-account tiller'
               tillerNamespace: '$(targetNamespace)'

           - task: AzureCLI@1
             inputs:
               azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
               scriptLocation: 'inlineScript'
               inlineScript: 'az configure --defaults acr=$(registryName)'
             condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
             displayName: 'Set Azure Container Registry Default in Azure CLI'

           - task: AzureCLI@1
             inputs:
               azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
               scriptLocation: 'inlineScript'
               inlineScript: 'az acr helm repo add'
             condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
             displayName: 'Add Azure Container Registry Repo to Azure CLI'

           - task: HelmDeploy@0
             displayName: 'helm upgrade'
             inputs:
               connectionType: 'Kubernetes Service Connection'
               kubernetesServiceConnection: 'AKS - Test Environment'
               namespace: '$(targetNamespace)'
               command: upgrade
               chartName: '$(registryName)/$(projectName)'
               releaseName: '$(projectName)-$(environmentSuffix)'
               arguments: '--version $(build.buildNumber) --set ui.image.repository=$(uiImageRepository) --set ui.image.tag=$(build.buildNumber) --set api.config.azureDatabaseEnabled=$(azureDatabaseEnabled) --set api.config.databaseServer=$(databaseServer) --set api.config.azureRedisCacheEnabled=$(azureRedisCacheEnabled) --set api.config.redisUrl=$(azureRedisServer) --set api.config.redisPassword=$(azureRedisPassword) --set api.config.redisDefaultDatabase=$(redisDefaultDatabase) --set api.image.repository=$(apiImageRepository) --set api.image.tag=$(build.buildNumber) --set api.config.database=$(apiDatabaseName) --set api.config.user=$(apiDatabaseUser) --set api.config.password=$(apiDatabasePassword) --set ingress.hosts={$(ingressHost)} --set ingress.tls[0].secretName=$(ingressTlsSecretName) --set ingress.tls[0].hosts={$(ingressHost)} --set ingress.annotations."certmanager\.k8s\.io/cluster-issuer"=$(ingressClusterIssuerName) --set replicaCount=$(replicaCount)'
               tillerNamespace: '$(targetNamespace)'
