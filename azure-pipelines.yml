# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master
- feat/*
- fix/*
- chore/*

variables:
  buildConfiguration: 'Release'
  dockerId: marcelmichau
  apiImageName: fakesurveygeneratorapi
  uiImageName: fakesurveygeneratorui
  versionTag: $(build.buildNumber)

stages:
- stage: Build
  jobs:
    - job: Build_Stuff
      pool:
        vmImage: 'ubuntu-latest'
      steps:
      - task: DotNetCoreInstaller@0
        displayName: 'Install .net core 3.0 (preview)'
        inputs:
          version: '3.0.100-preview8-013656'

      - script: dotnet build FakeSurveyGenerator.sln --configuration $(buildConfiguration)
        displayName: 'Build Solution'

      - script: dotnet test src/server/FakeSurveyGenerator.Domain.Tests/FakeSurveyGenerator.Domain.Tests.csproj --logger trx
        displayName: 'Run Unit Tests'

      - script: dotnet test src/server/FakeSurveyGenerator.API.Tests.Integration/FakeSurveyGenerator.API.Tests.Integration.csproj --logger trx
        displayName: 'Run Integration Tests'

      - task: PublishTestResults@2
        condition: succeededOrFailed()
        inputs:
          testRunner: VSTest
          testResultsFiles: '**/*.trx'
        displayName: 'Publish Test Results'

      - script: |
          dotnet tool install --global dotnet-ef --version 3.0.0-preview8.19405.11
        displayName: 'Install EF Core Global Tool'

      - script: |
          dotnet ef migrations script -o DbMigrationScript.sql -i
        workingDirectory: src/server/FakeSurveyGenerator.EF.Design
        displayName: 'Create Database Migration Script'

      - task: PublishBuildArtifacts@1
        inputs:
          pathToPublish: src/server/FakeSurveyGenerator.EF.Design/DbMigrationScript.sql
          artifactName: DbMigrationScript
        displayName: 'Publish Database Migration Script'

      - script: |
          docker build -t $(dockerId)/$(apiImageName):$(versionTag) -t $(dockerId)/$(apiImageName):latest -f src/server/FakeSurveyGenerator.API/Dockerfile .
          docker build -t $(dockerId)/$(uiImageName):$(versionTag) -t $(dockerId)/$(uiImageName):latest -f src/client/ui/Dockerfile .
        displayName: 'Build Docker Images'

      - script: |
          echo "$DOCKER_PASSWORD" | docker login -u $(dockerId) --password-stdin
          docker push $(dockerId)/$(apiImageName)
          docker push $(dockerId)/$(uiImageName)
        env:
          DOCKER_PASSWORD: $(dockerPassword)
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Push Docker Images to Docker Hub'

      - task: HelmInstaller@1
        inputs:
          helmVersionToInstall: 'latest'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Install Helm'

      - task: HelmDeploy@0
        inputs:
          command: 'package'
          arguments: '--version $(versionTag)'
          chartPath: 'charts/fakesurveygenerator'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Helm Package'

      - task: AzureCLI@1
        inputs:
          azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
          scriptLocation: 'inlineScript'
          inlineScript: 'az configure --defaults acr=marcelmichaucrv1'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Set Azure Container Registry Default in Azure CLI'

      - task: AzureCLI@1
        inputs:
          azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
          scriptLocation: 'inlineScript'
          inlineScript: 'az acr helm repo add'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Add Azure Container Registry Repo to Azure CLI'

      - task: AzureCLI@1
        inputs:
          azureSubscription: 'Visual Studio Enterprise(492e64aa-2506-4b65-8105-b490c3c34a40)'
          scriptLocation: 'inlineScript'
          inlineScript: 'az acr helm push $(Build.ArtifactStagingDirectory)/fakesurveygenerator-$(versionTag).tgz'
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        displayName: 'Push Helm Chart to Azure Container Registry'